name: "Deploy all given apps on the given stage"
description: "does what it says in the name"

inputs:
  stage:
    description: The stage on which the apps shall be deployed
    required: true

  apps:
    description: list of apps
    required: true

runs:
  using: composite
  steps:
    - name: Create releases
      run: |
        declare -a stages
        for stage in $(echo '${{ inputs.apps }}' | jq -r '.[]'); do
          stages+=($stage)
        done

        declare -A stages_with_release_id

        # RANDOM should be replaced with calls to setops
        echo "Generating Releases"
        for stage in ${stages[@]}; do
          echo "Generating Release for $stage"
          stages_with_release_id[$stage]=$RANDOM
        done

        echo "Run pre-deploy-commands"
        first_stage=${stages[0]}
        release_id_of_first_stage=${stages_with_release_id[$first_stage]}
        echo Migrate for $first_stage - $release_id_of_first_stage

        echo "Commit"

        echo "Activating Releases"
        for stage in "${stages[@]}"; do
          release_id=${stages_with_release_id[$stage]}
          echo Activating Release: $stage -- $release_id
        done

        echo "Commit"

        echo "Wait for Releases"
        max_times=10
        for i in $(seq 1 $max_times); do 
          echo foo $i
          # Simulate an successful release
          if [ $i = 9 ]; then break; fi

          sleep 1
          
          # Simulate a non-successful release
          if [ $i = $max_times ]; then exit 1; fi
        done

      shell: bash
